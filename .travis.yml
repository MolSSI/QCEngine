language: generic

# Run jobs on container-based infrastructure, can be overridden per job
dist: xenial

matrix:

  include:
    - os: linux
      env:
        - PYTHON_VER=3.6
        - PROG=PSI4
    - os: linux
      env:
        - PYTHON_VER=3.7
        - PROG=PSI4DEV  # py37 not avail for latest release
    - os: linux
      env:
        - PYTHON_VER=3.6
        - PROG=ANI
    - os: linux
      env:
        - PYTHON_VER=3.6
        - PROG=OPENMM
    - os: linux
      env:
        - PYTHON_VER=3.6
        - PROG=XTB

    - os: linux
      addons: &1
        apt:
          packages:
          - nwchem
      env:
        - PYTHON_VER=3.6
        - PROG=NWCHEM

before_install:
    # Additional info about the build
  - uname -a
  - df -h
  - ulimit -a

    # Install the Python environemt
  - source devtools/travis-ci/before_install.sh
  - python -V

install:

    # Create test environment for package
  - |
    if [ $PROG == "PSI4" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/psi.yaml
    elif [ $PROG == "PSI4DEV" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/psi-nightly.yaml
    elif [ $PROG == "ANI" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/torchani.yaml
    elif [ $PROG == "OPENMM" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/openmm.yaml
    elif [ $PROG == "NWCHEM" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/nwchem.yaml
    elif [ $PROG == "XTB" ]; then
      python devtools/scripts/conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/xtb.yaml
    else
      echo "ERROR: No match for PROG ($PROG)."
      exit 1
    fi
  - source activate test

    # Any kind of post env ceation
  - |
    if [ $PROG == "PSI4DEV" ]; then
      conda remove qcengine --force
    fi
  - conda list

    # Build and install package
  - python setup.py develop --no-deps

  - qcengine info
  - export QCER_VER=`python -c "import qcengine.testing; print(qcengine.testing.QCENGINE_RECORDS_COMMIT)"`
  - pip install git+https://github.com/MolSSI/QCEngineRecords.git@${QCER_VER}#egg=qcenginerecords

script:
    # Get a bit of info first
  - python -c "import qcengine; print(qcengine.config.global_repr())"

    # Run canonical tests
  - pytest -rsx -v --cov=qcengine/ qcengine/


notifications:
    email: false

after_success:
  - codecov
